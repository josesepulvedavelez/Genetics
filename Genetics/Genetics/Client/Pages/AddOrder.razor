@page "/AddOrder"

@using Genetics.Shared.Models;
@using Genetics.Shared;
@using Newtonsoft
@using Newtonsoft.Json
@using System.Text
@*@inject Services.ClienteService clienteService*@
@inject HttpClient Http
@inject DialogService DialogService
@inject NotificationService NotificationService

<RadzenNotification />

@if (_OrderModel == null)
{
    <div class="spinner-grow" style="width: 3rem; height: 3rem;" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
}
else
{
    <EditForm Model="@_OrderModel">
        <div class="row">

            <div class="col-md-6">
                <div class="form-group">
                    <label>Animal</label>
                    <RadzenDropDown TValue="int" Data="@_OrderModel.lstAnimal" 
                                    TextProperty="Name" ValueProperty="AnimalId"
                                    @bind-Value="@_SelectedAnimalId" class="w-100"
                                Change="(() => OnAnimalSelectionChange(_SelectedAnimalId))" />
                </div>
            </div>

            <div class="col-md-6">
                <div class="form-group">
                    <label>Price</label>
                    <RadzenTextBox Value="@_Price.ToString()" Change="@((string value) => _Price = decimal.TryParse(value, out var parsedValue) ? parsedValue : 0)" class="w-100" />
                </div>
            </div>

            <div class="col-md-6">
                <div class="form-group">
                    <label>Amount</label>
                    <RadzenNumeric @bind-Value="@_Amount" class="w-100" />
                </div>
            </div>
        </div>

        <br />

        <div class="col-md-12">
            <center>
                <button type="button" class="btn btn-success" @onclick="(() => OnAddList())">Add</button>
                <button type="submit" class="btn btn-success" @onclick = "(() => Save())">Save</button>
            </center>
        </div>

        <br />

        <table border="1">
            <thead>
                <th>AnimalID</th>
                <th>Amount</th>
            </thead>
            <tbody>
                @foreach (var item in _lstOrderDetails)
                {
                    <tr>
                        <td>@item.AnimalId</td>
                        <td>@item.Amount</td>
                    </tr>
                }
            </tbody>
        </table>
    </EditForm>
}

@code {
    private OrderModel _OrderModel = new OrderModel();
    private IEnumerable<Animal> _lstAnimals = new List<Animal>();

    private int _SelectedAnimalId;
    decimal _Price;
    private int _Amount;

    private List<OrderDetail> _lstOrderDetails = new();

    protected override async Task OnInitializedAsync()
    {
        var response = await Http.GetFromJsonAsync<IEnumerable<Animal>>("/Api/Animals/GetAnimal");

        if (response != null)
        {
            _lstAnimals = response;
            
            _OrderModel = new OrderModel
            {
                lstAnimal = response.ToList(),
                Order = new Order(),
                lstOrderDetail = new List<OrderDetail>()
            };
        }

    }

    private decimal OnAnimalSelectionChange(int animalId)
    {
        var selectedAnimal = _lstAnimals.FirstOrDefault(a => a.AnimalId == animalId);
        _Price = selectedAnimal.Price;
        return _Price;
    }

    private void OnAddList()
    {
        var existingItem = _lstOrderDetails.FirstOrDefault(item => item.AnimalId == _SelectedAnimalId);

        if (existingItem == null)
        {
            _lstOrderDetails.Add(
                new OrderDetail
                    {
                        Amount = _Amount,
                        Discount = 0,
                        
                        Subtotal = 0,
                        AnimalId = _SelectedAnimalId
                    });
        }
        else
        {
            ShowNotification(new NotificationMessage
                {
                    Severity = NotificationSeverity.Warning,
                    Summary = "Add Order",
                    Detail = "The animal is already in the list.",
                    Duration = 5000
                });
        }
    }

    private async Task Save()
    {
        try
        {
            _OrderModel.Order.Date = DateTime.Now;
            _OrderModel.Order.TotalDiscount = 0;
            _OrderModel.Order.TotalPurchase = 0;

            _OrderModel.lstOrderDetail = _lstOrderDetails;

            var json = JsonConvert.SerializeObject(_OrderModel);
            var stringContent = new StringContent(json, UnicodeEncoding.UTF8, "application/json");
            var httpResponse = await Http.PostAsync("/Api/Orders/AddOrder", stringContent);

            if (httpResponse.IsSuccessStatusCode)
            {
                ShowNotification(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Success,
                        Summary = "Save Order",
                        Detail = "Order saved successfully.",
                        Duration = 5000
                    });
                DialogService.Close(true);
            }
            else
            {
                ShowNotification(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Warning,
                        Summary = "Save Order",
                        Detail = "The Order could not be saved.",
                        Duration = 5000
                    });
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"{ex.Message}");
        }
    }

    void ShowNotification(NotificationMessage message)
    {
        NotificationService.Notify(message);
    }
}
